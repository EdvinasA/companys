# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0
  aws-cli: circleci/aws-cli@3.1.3
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@3.2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:2022.06
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Install OpenJDK 11
          command: |
            sudo apt-get update && sudo apt-get install openjdk-11-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-11-openjdk-amd64/bin/javac
            java -version
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: gradle
          command: ./gradlew build -x spotlessJavaCheck

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-and-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-cli-version: latest
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          context: myContext
          create-repo: true
          dockerfile: myDockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          new-profile-name: newProfileName
          no-output-timeout: 20m
          path: pathToMyDockerfile
          platform: linux/amd64
          profile-name: myProfileName
          public-registry: false
          push-image: true
          region: AWS_REGION
          registry-id: AWS_ECR_REGISTRY_ID
          repo: myECRRepository
          repo-scan-on-push: true
          role-arn: 'arn:aws:iam::123456789012:role/testing'
          skip-when-tags-exist: false
          source-profile: sourceProfileName
          tag: 'latest,myECRRepoTag'
      - aws-ecs/deploy-service-update:
          cluster: '${MY_APP_PREFIX}-cluster'
          container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'
          family: '${MY_APP_PREFIX}-service'
          post-steps:
            - run:
                name: Test the deployment
                command: |
                  TARGET_GROUP_ARN=$(aws ecs describe-services --cluster ${AWS_RESOURCE_NAME_PREFIX}-cluster --services ${AWS_RESOURCE_NAME_PREFIX}-service | jq -r '.services[0].loadBalancers[0].targetGroupArn')
                  ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
                  ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
                  curl -s --retry 10 http://$ELB_DNS_NAME | grep "Welcome to nginx!"
